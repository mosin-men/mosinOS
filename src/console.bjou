# console.bjou

module console

import "defs.bjou"
import "uart.bjou"
import "cstr.bjou"
using cstr

_con       : console

proc init() { _con = console.create() }

type console {
    read_fn : <() : char>

    proc create() : console {
        c := { console: }
        c.echo_on()

        return c
    }

    proc echo_on(this) {
        this.read_fn = uart::read_echo
    }

    proc echo_off(this) {
        this.read_fn = uart::read
    }

    proc readchar(this) : char {
        c := '\0'
        while not c    { c = this.read_fn() }
        return c
    }

    proc readln(this, dst : char*) {
        c := '\0'
        while true {
            while not (c = this.read_fn()) {}
            
            if c == '\r' {
                @dst = '\n'
                dst += 1
                break
            } else {
                @dst = c
                dst += 1
            }
        }
        @dst = '\0'
    }

    proc write(this, c : char) {
        if c == '\n' {
            uart::write('\r')
        }
        uart::write(c)
    }

    proc write(this, s : char*) {
        while @s {
            this.write(@s)
            s += 1
        }
    }
}

proc readchar() : char {
    return _con.readchar()
}

proc readln(dst : char*) {
    _con.readln(dst)
}

proc write(c : char) {
    _con.write(c)
}

proc write(s : char*) {
    _con.write(s)
}

proc write(i : i32) {
    buff : char[64]
    itoa(i, buff)
    _con.write(buff)
}

proc writeln() {
    _con.write("\n")
}

proc writeln(i : i32) {
    _con.write(i)
    _con.write("\n")
}

proc writeln(s : char*) {
    _con.write(s)
    _con.write("\n")
}

proc echo_on() {
    _con.echo_on()
}

proc echo_off() {
    _con.echo_off()
}

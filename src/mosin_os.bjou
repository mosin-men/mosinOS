# mosin_os.bjou
#
# bJou branch of MosinOS.
#
# A little operating system for Dr. Marz's COSC690
# This operating system is about as fancy as a Mosin.

import "compiler_support.bjou"
import "__slice.bjou"
using import "none.bjou"
using import "error.bjou"
import "defs.bjou"
import "trap.bjou"
import "uart.bjou"
using import "console.bjou"
using import "asm.bjou"
using import "util.bjou"
using import "PCB.bjou"
using import "atomics/locks.bjou"
using import "syscall.bjou"
using import "heap.bjou"
using import "sched.bjou"
using import "abort.bjou"
using import "processes/a.bjou"
using import "processes/b.bjou"
using import "processes/c.bjou"
using import "processes/init.bjou"
using import "processes/mkproc.bjou"

proc __no_mangle__ main() {
    # Initialize core components.
    if  start_component("uart",    uart   ::init)
    and start_component("console", console::init)
    and start_component("heap",    heap   ::init)
    and start_component("sched",   sched  ::init) {
        # Turn on timer interrupts.
        asm$enable_interrupts()
        # Enter user mode
        asm$umode_switch() 

        # init does not exit
        mkproc$process_init::init()

        # spin and let processes take over
        while true    { asm$wfi() }
    }
    
    abort("Boot failure.")
}

proc start_component(comp_name : char*, ini : <() : (error | none)>) : bool {
    status := ini()
    init_message(comp_name, status)

    if err : error = status { return false }
    return true
}

proc init_message(comp_name : char*, status : (error | none)) {
    buff : char[32]
    buff[0] = 0
    cstrcat(buff, "[ ")
    cstrcat(buff, comp_name)
    for i := 0; i < 7 - cstrlen(comp_name); i += 1
        cstrcat(buff, " ")
    cstrcat(buff, " ] ")

    write(buff)

    if err : error = status {
        write("ERROR (")  write(err.code)  write(") ")  writeln(err.msg)
    } else {
        writeln("Ok.")
    }
}

# mem.bjou

module mem

proc mcopy(dst : void*, src : void*, nbytes : u64) : void* {
    ncopied := 0u64
    ldp     := dst as u64*
    lsp     := src as u64*

    while nbytes - ncopied > sizeof u64 {
        @ldp = @lsp

        ldp     += 1 
        lsp     += 1 
        ncopied += sizeof u64
    }
    
    bdp := ldp as u8*
    bsp := lsp as u8*

    for ; ncopied < nbytes; ncopied += 1 {
        @bdp = @bsp 

        bdp += 1 
        bsp += 1 
    }

    return dst
}

proc mset(dst : void*, val : u8, nbytes : u64) : void* {
    nset   := 0u64
    ldp    := dst as u64*
    four   : u8[sizeof u64]
    four_p := (&four) as u64*

    for i := 0; i < sizeof u64; i += 1 {
        four[i] = val
    }

    while nbytes - nset > sizeof u64 {
        @ldp = @four_p
        ldp  += 1 
        nset += sizeof u64
    }
    
    bdp := ldp as u8*

    for ; nset < nbytes; nset += 1 {
        @bdp = val
        bdp += 1 
    }

    return dst
}
